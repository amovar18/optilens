{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport axios from 'axios';\nexport const getSingle = createAsyncThunk('transaction/getSingle', async id => {\n  const response = await axios.delete('http://localhost:5000/cart/delete', {\n    withCredentials: true,\n    data: {\n      'pid': id\n    }\n  });\n  return response.data;\n});\nexport const getAll = createAsyncThunk('transaction/getAll', async (_, {\n  getState,\n  rejectWithValue\n}) => {\n  try {\n    const response = await axios.get('http://localhost:5000/cart/getcart', {\n      withCredentials: true\n    });\n    return response.data;\n  } catch (error) {\n    return rejectWithValue(error.response.data);\n  }\n});\nconst transactionSlice = createSlice({\n  name: 'transaction',\n  initialState: {\n    transaction: [],\n    error: ''\n  },\n  reducers: {},\n  extraReducers: {\n    [getSingle.fulfilled]: (state, action) => {\n      state = action.payload;\n    },\n    [getSingle.rejected]: (state, action) => {\n      state = action.payload;\n    },\n    [getAll.fulfilled]: (state, action) => {\n      state.transaction = action.payload;\n    },\n    [getAll.rejected]: (state, action) => {}\n  }\n});\nexport default transactionSlice.reducer;","map":{"version":3,"sources":["C:/Users/Geeta/opticonnect/frontend/src/slices/transaction/transactionSlice.js"],"names":["createAsyncThunk","createSlice","axios","getSingle","id","response","delete","withCredentials","data","getAll","_","getState","rejectWithValue","get","error","transactionSlice","name","initialState","transaction","reducers","extraReducers","fulfilled","state","action","payload","rejected","reducer"],"mappings":"AAAA,SAAQA,gBAAR,EAA0BC,WAA1B,QAA4C,kBAA5C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAO,MAAMC,SAAS,GAAGH,gBAAgB,CACrC,uBADqC,EAErC,MAAOI,EAAP,IAAY;AACR,QAAMC,QAAQ,GAAG,MAAMH,KAAK,CAACI,MAAN,CAAa,mCAAb,EAAiD;AAACC,IAAAA,eAAe,EAAC,IAAjB;AAAsBC,IAAAA,IAAI,EAAC;AAAC,aAAMJ;AAAP;AAA3B,GAAjD,CAAvB;AACA,SAAOC,QAAQ,CAACG,IAAhB;AACH,CALoC,CAAlC;AAOP,OAAO,MAAMC,MAAM,GAAGT,gBAAgB,CAClC,oBADkC,EAElC,OAAOU,CAAP,EAAU;AAACC,EAAAA,QAAD;AAAYC,EAAAA;AAAZ,CAAV,KAAyC;AACrC,MAAG;AACC,UAAMP,QAAQ,GAAG,MAAMH,KAAK,CAACW,GAAN,CAAU,oCAAV,EAA+C;AAACN,MAAAA,eAAe,EAAC;AAAjB,KAA/C,CAAvB;AACA,WAAOF,QAAQ,CAACG,IAAhB;AACH,GAHD,CAGC,OAAMM,KAAN,EAAY;AACT,WAAOF,eAAe,CAACE,KAAK,CAACT,QAAN,CAAeG,IAAhB,CAAtB;AACH;AACJ,CATiC,CAA/B;AAWP,MAAMO,gBAAgB,GAAGd,WAAW,CAAC;AACjCe,EAAAA,IAAI,EAAC,aAD4B;AAEjCC,EAAAA,YAAY,EAAC;AACTC,IAAAA,WAAW,EAAC,EADH;AAETJ,IAAAA,KAAK,EAAC;AAFG,GAFoB;AAMjCK,EAAAA,QAAQ,EAAC,EANwB;AAOjCC,EAAAA,aAAa,EAAC;AACV,KAACjB,SAAS,CAACkB,SAAX,GAAsB,CAACC,KAAD,EAAOC,MAAP,KAAgB;AAClCD,MAAAA,KAAK,GAACC,MAAM,CAACC,OAAb;AACH,KAHS;AAGR,KAACrB,SAAS,CAACsB,QAAX,GAAqB,CAACH,KAAD,EAAOC,MAAP,KAAgB;AACnCD,MAAAA,KAAK,GAACC,MAAM,CAACC,OAAb;AACH,KALS;AAKR,KAACf,MAAM,CAACY,SAAR,GAAmB,CAACC,KAAD,EAAQC,MAAR,KAAiB;AAClCD,MAAAA,KAAK,CAACJ,WAAN,GAAkBK,MAAM,CAACC,OAAzB;AACH,KAPS;AAOR,KAACf,MAAM,CAACgB,QAAR,GAAmB,CAACH,KAAD,EAAQC,MAAR,KAAiB,CACrC;AARS;AAPmB,CAAD,CAApC;AAmBA,eAAeR,gBAAgB,CAACW,OAAhC","sourcesContent":["import {createAsyncThunk, createSlice} from '@reduxjs/toolkit';\r\nimport axios from 'axios';\r\n\r\nexport const getSingle = createAsyncThunk(\r\n    'transaction/getSingle',\r\n    async (id)=>{\r\n        const response = await axios.delete('http://localhost:5000/cart/delete',{withCredentials:true,data:{'pid':id}});\r\n        return response.data;\r\n    }\r\n)\r\nexport const getAll = createAsyncThunk(\r\n    'transaction/getAll',\r\n    async (_, {getState , rejectWithValue})=>{\r\n        try{\r\n            const response = await axios.get('http://localhost:5000/cart/getcart',{withCredentials:true});\r\n            return response.data;\r\n        }catch(error){\r\n            return rejectWithValue(error.response.data);\r\n        }\r\n    }\r\n)\r\nconst transactionSlice = createSlice({\r\n    name:'transaction',\r\n    initialState:{\r\n        transaction:[],\r\n        error:'',\r\n    },\r\n    reducers:{},\r\n    extraReducers:{\r\n        [getSingle.fulfilled]:(state,action)=>{\r\n            state=action.payload;\r\n        },[getSingle.rejected]:(state,action)=>{\r\n            state=action.payload;\r\n        },[getAll.fulfilled]:(state, action)=>{\r\n            state.transaction=action.payload;\r\n        },[getAll.rejected]: (state, action)=>{\r\n        }\r\n    }\r\n\r\n})\r\nexport default transactionSlice.reducer;"]},"metadata":{},"sourceType":"module"}