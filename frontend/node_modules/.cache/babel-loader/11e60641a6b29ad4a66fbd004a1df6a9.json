{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport axios from 'axios';\nexport const checkUsernameAvailability = createAsyncThunk('seller/checkUsernameAvailability', async ({\n  getState\n}) => {\n  const {\n    Registration_username\n  } = getState().authentication;\n\n  if (Registration_username !== '') {\n    try {\n      const response = axios.get('http://localhost:5000/user/availability/' + Registration_username, {\n        withCredentials: true\n      });\n      return (await response).data;\n    } catch (err) {\n      return Promise.reject(401);\n    }\n  }\n});\nexport const createSeller = createAsyncThunk('seller/create', async ({\n  getState\n}) => {\n  const {\n    availability,\n    passwordMatch,\n    criteriaError\n  } = getState().seller;\n\n  if (availability === true && passwordMatch === false && criteriaError === false) {\n    const {\n      username,\n      password,\n      name,\n      email,\n      phone,\n      owner,\n      company_registration,\n      address_line_1,\n      address_line_2,\n      area,\n      pincode,\n      city,\n      state\n    } = getState().seller;\n    const formData = new FormData();\n    formData.append('email', email);\n    formData.append('password', password);\n    formData.append('name', name);\n    formData.append('owner', owner);\n    formData.append('username', username);\n    formData.append('phone', phone);\n    formData.append('image', company_registration);\n    formData.append('address', address_line_1 + '\\n' + address_line_2 + '\\n' + area + '-' + pincode + '\\n' + city + '\\n' + state);\n\n    try {\n      const response = axios.post('http://localhost:5000/seller/create', {\n        formData\n      }, {\n        withCredentials: true\n      });\n      return (await response).data;\n    } catch (err) {\n      return Promise.reject(401);\n    }\n  }\n});\nconst sellerSlice = createSlice({\n  name: 'seller',\n  initialState: {\n    email: '',\n    password: '',\n    confirm_password: '',\n    type_of_user: '',\n    name: '',\n    owner: '',\n    username: '',\n    phone: '',\n    city: '',\n    state: '',\n    pincode: '',\n    address_line_1: '',\n    address_line_2: '',\n    area: '',\n    company_registration: '',\n    registrationError: '',\n    passwordMatch: '',\n    criteriaError: '',\n    availability: 'NaN'\n  },\n  reducers: {\n    setValue: (state, action) => {\n      state[action.payload.name] = action.payload.value;\n    },\n    setFile: (state, action) => {\n      state[action.payload.name] = action.payload.value;\n    },\n    setpasswordMatch: (state, action) => {\n      state.passwordMatch = action.payload.value;\n    },\n    setcriteriaError: (state, action) => {\n      state.criteriaError = action.payload.value;\n    },\n    setavailability: (state, action) => {\n      state.availability = action.payload.value;\n    }\n  },\n  extraReducers: {\n    [createSeller.fulfilled]: (state, action) => {\n      console.log(action);\n      state.user = action.payload.user;\n      state.links = action.payload.links;\n      console.log(state);\n      state.isAuthenticated = true;\n      return action.payload.status;\n    },\n    [createSeller.rejected]: (state, action) => {\n      state.error = true;\n    },\n    [checkUsernameAvailability.fulfilled]: (state, action) => {\n      state.availability = action.payload;\n    },\n    [checkUsernameAvailability.rejected]: (state, action) => {\n      state.availability = false;\n    }\n  }\n});\nexport const {\n  setValue,\n  setFile,\n  setavailability,\n  setpasswordMatch,\n  setcriteriaError\n} = sellerSlice.actions;\nexport default sellerSlice.reducer;","map":{"version":3,"sources":["C:/Users/Geeta/opticonnect/frontend/src/slices/seller/sellerSlice.js"],"names":["createAsyncThunk","createSlice","axios","checkUsernameAvailability","getState","Registration_username","authentication","response","get","withCredentials","data","err","Promise","reject","createSeller","availability","passwordMatch","criteriaError","seller","username","password","name","email","phone","owner","company_registration","address_line_1","address_line_2","area","pincode","city","state","formData","FormData","append","post","sellerSlice","initialState","confirm_password","type_of_user","registrationError","reducers","setValue","action","payload","value","setFile","setpasswordMatch","setcriteriaError","setavailability","extraReducers","fulfilled","console","log","user","links","isAuthenticated","status","rejected","error","actions","reducer"],"mappings":"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","sourcesContent":["import {createAsyncThunk, createSlice} from '@reduxjs/toolkit';\r\nimport axios from 'axios';\r\nexport const checkUsernameAvailability = createAsyncThunk(\r\n    'seller/checkUsernameAvailability',\r\n    async ( {getState} ) =>{\r\n        const {Registration_username} = getState().authentication;\r\n        if(Registration_username!==''){\r\n            try{\r\n                const response = axios.get('http://localhost:5000/user/availability/'+Registration_username,{withCredentials:true});\r\n                return (await response).data;\r\n            }catch(err){\r\n                return Promise.reject(401);\r\n            }\r\n        }\r\n    }\r\n)\r\nexport const createSeller = createAsyncThunk(\r\n    'seller/create',\r\n    async ( {getState} ) =>{\r\n        const {availability, passwordMatch, criteriaError} = getState().seller;\r\n        if(availability===true && passwordMatch===false && criteriaError===false){\r\n            const {username, password, name, email, phone, owner, company_registration, address_line_1,address_line_2, area, pincode, city, state}=getState().seller;\r\n            const formData = new FormData(); \r\n                formData.append('email',email);\r\n                formData.append('password',password);\r\n                formData.append('name',name);\r\n                formData.append('owner',owner);\r\n                formData.append('username',username);\r\n                formData.append('phone',phone);\r\n                formData.append('image', company_registration);\r\n                formData.append('address',address_line_1+'\\n'+address_line_2+'\\n'+area+'-'+pincode+'\\n'+city+'\\n'+state)\r\n            try{\r\n                const response = axios.post('http://localhost:5000/seller/create',{\r\n                    formData\r\n                },{withCredentials:true});\r\n                return (await response).data;\r\n            }catch(err){\r\n                return Promise.reject(401);\r\n            }\r\n        }\r\n    }\r\n)\r\nconst sellerSlice = createSlice({\r\n    name:'seller',\r\n    initialState:{\r\n        email: '',\r\n        password:'',\r\n        confirm_password:'',\r\n        type_of_user:'',\r\n        name:'',\r\n        owner:'',\r\n        username:'',\r\n        phone:'',\r\n        city:'',\r\n\t\tstate:'',\r\n\t\tpincode:'',\r\n\t\taddress_line_1:'',\r\n\t\taddress_line_2:'',\r\n\t\tarea:'',\r\n        company_registration:'',\r\n        registrationError:'',\r\n        passwordMatch:'',\r\n        criteriaError:'',\r\n        availability:'NaN'\r\n        \r\n    },\r\n    reducers:{\r\n        setValue:(state,action)=>{\r\n            state[action.payload.name] = action.payload.value;\r\n        },setFile:(state, action)=>{\r\n            state[action.payload.name] = action.payload.value;\r\n        },setpasswordMatch:(state, action)=>{\r\n            state.passwordMatch = action.payload.value;\r\n        },setcriteriaError:(state, action)=>{\r\n            state.criteriaError = action.payload.value;\r\n        },setavailability:(state, action)=>{\r\n            state.availability = action.payload.value;\r\n        },\r\n    },\r\n    extraReducers:{\r\n        [createSeller.fulfilled]:(state, action)=>{\r\n            console.log(action)\r\n            state.user=action.payload.user;\r\n            state.links=action.payload.links;\r\n            console.log(state);\r\n            state.isAuthenticated=true;\r\n            return action.payload.status;\r\n        },[createSeller.rejected]:(state, action)=>{\r\n            state.error = true;\r\n        },[checkUsernameAvailability.fulfilled]:(state, action)=>{\r\n            state.availability = action.payload;\r\n        },[checkUsernameAvailability.rejected]:(state,action)=>{\r\n            state.availability = false;\r\n        }\r\n    }\r\n})\r\nexport const {setValue, setFile, setavailability, setpasswordMatch, setcriteriaError}=sellerSlice.actions;\r\nexport default sellerSlice.reducer;"]},"metadata":{},"sourceType":"module"}