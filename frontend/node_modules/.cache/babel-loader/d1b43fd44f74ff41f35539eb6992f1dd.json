{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport axios from 'axios';\nexport const trasnactionAdd = createAsyncThunk('transaction/Add', async ({\n  getState\n}) => {\n  const {\n    name,\n    city,\n    state,\n    pincode,\n    address_line_1,\n    address_line_2,\n    area\n  } = getState().transaction;\n\n  try {\n    const response = await axios.post('http://localhost:5000/cart/addtocart', {\n      data: {\n        'delivery_address': address_line_1 + '\\n' + address_line_2 + '\\n' + area + '\\n' + city + '-' + pincode + '\\n' + state,\n        'total_price': total_price,\n        'name': name\n      }\n    }, {\n      withCredentials: true\n    });\n    return response.data;\n  } catch (error) {\n    return Promise.reject(500);\n  }\n});\nexport const cartAdd = createAsyncThunk('cart/Add', async (id, lens_details, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await axios.post('http://localhost:5000/cart/addtocart', {\n      withCredentials: true,\n      data: {\n        'id': id,\n        'lens_details': lens_details\n      }\n    });\n    return response.data;\n  } catch (error) {\n    return rejectWithValue(error.response.status);\n  }\n});\nexport const cartDelete = createAsyncThunk('cart/delete', async id => {\n  const response = await axios.delete('http://localhost:5000/cart/delete', {\n    withCredentials: true,\n    data: {\n      'pid': id\n    }\n  });\n  return response.data;\n});\nexport const cartGet = createAsyncThunk('cart/getCart', async () => {\n  const response = await axios.get('http://localhost:5000/cart/getcart', {\n    withCredentials: true\n  });\n  return response.data;\n});\nconst cartSlice = createSlice({\n  name: 'cart',\n  initialState: {\n    cart: [],\n    total_price: 0,\n    delivery_address: '',\n    name: '',\n    city: '',\n    state: '',\n    pincode: '',\n    address_line_1: '',\n    address_line_2: '',\n    area: ''\n  },\n  reducers: {},\n  extraReducers: {\n    [cartAdd.fulfilled]: (state, action) => {\n      state.push(action.payload);\n    },\n    [cartDelete.fulfilled]: (state, action) => {\n      state = action.payload;\n      return state;\n    },\n    [cartGet.fulfilled]: (state, action) => {\n      state = action.payload;\n      return state;\n    },\n    [cartAdd.rejected]: (state, action) => {\n      return action.payload;\n    },\n    [trasnactionAdd.fulfilled]: (state, action) => {},\n    [trasnactionAdd.rejected]: (state, action) => {}\n  }\n});\nexport default cartSlice.reducer;","map":{"version":3,"sources":["C:/Users/Geeta/opticonnect/frontend/src/slices/cart/cartSlice.js"],"names":["createAsyncThunk","createSlice","axios","trasnactionAdd","getState","name","city","state","pincode","address_line_1","address_line_2","area","transaction","response","post","data","total_price","withCredentials","error","Promise","reject","cartAdd","id","lens_details","rejectWithValue","status","cartDelete","delete","cartGet","get","cartSlice","initialState","cart","delivery_address","reducers","extraReducers","fulfilled","action","push","payload","rejected","reducer"],"mappings":"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","sourcesContent":["import {createAsyncThunk, createSlice} from '@reduxjs/toolkit';\r\nimport axios from 'axios';\r\nexport const trasnactionAdd = createAsyncThunk(\r\n    'transaction/Add',\r\n    async ({getState})=>{\r\n        const {name,city,state,pincode,address_line_1,address_line_2,area} = getState().transaction;\r\n        try{\r\n            const response = await axios.post('http://localhost:5000/cart/addtocart',\r\n            {data:{\r\n                'delivery_address':address_line_1+'\\n'+address_line_2+'\\n'+area+'\\n'+city+'-'+pincode+'\\n'+state,\r\n\t\t\t\t'total_price':total_price,\r\n\t\t\t\t'name':name\r\n            }},\r\n            {withCredentials:true});\r\n            return response.data;\r\n        }catch(error){\r\n            return Promise.reject(500);\r\n        }\r\n    }\r\n)\r\nexport const cartAdd = createAsyncThunk(\r\n    'cart/Add',\r\n    async (id,lens_details,{rejectWithValue})=>{\r\n        try{\r\n            const response = await axios.post('http://localhost:5000/cart/addtocart',{withCredentials:true,\r\n            data:{'id':id,'lens_details':lens_details}});\r\n            return response.data;\r\n        }catch(error){\r\n            return rejectWithValue(error.response.status);\r\n        }\r\n    }\r\n)\r\nexport const cartDelete = createAsyncThunk(\r\n    'cart/delete',\r\n    async (id)=>{\r\n        const response = await axios.delete('http://localhost:5000/cart/delete',{withCredentials:true,data:{'pid':id}});\r\n        return response.data;\r\n    }\r\n)\r\nexport const cartGet = createAsyncThunk(\r\n    'cart/getCart',\r\n    async ()=>{\r\n        const response = await axios.get('http://localhost:5000/cart/getcart',{withCredentials:true});\r\n        return response.data;\r\n    }\r\n)\r\nconst cartSlice = createSlice({\r\n    name:'cart',\r\n    initialState:{\r\n        cart:[],\r\n        total_price:0,\r\n        delivery_address:'',\r\n\t\tname:'',\r\n\t\tcity:'',\r\n\t\tstate:'',\r\n\t\tpincode:'',\r\n\t\taddress_line_1:'',\r\n\t\taddress_line_2:'',\r\n\t\tarea:'',\r\n    },\r\n    reducers:{},\r\n    extraReducers:{\r\n        [cartAdd.fulfilled]:(state, action)=>{\r\n            \r\n            state.push(action.payload);\r\n        },[cartDelete.fulfilled]:(state,action)=>{\r\n            state=action.payload;\r\n            return state;\r\n        },[cartGet.fulfilled]:(state, action)=>{\r\n            state=action.payload;\r\n            return state;\r\n        },[cartAdd.rejected]: (state, action)=>{\r\n            return action.payload;\r\n        },[trasnactionAdd.fulfilled]:(state, action)=>{\r\n            \r\n        },[trasnactionAdd.rejected]:(state, action)=>{\r\n            \r\n        },\r\n    }\r\n\r\n})\r\nexport default cartSlice.reducer;"]},"metadata":{},"sourceType":"module"}