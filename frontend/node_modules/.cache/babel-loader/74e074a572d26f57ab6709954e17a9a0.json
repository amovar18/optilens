{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport axios from 'axios';\nexport const trasnactionAdd = createAsyncThunk('transaction/Add', async ({\n  getState\n}) => {\n  const {\n    name,\n    city,\n    state,\n    pincode,\n    address_line_1,\n    address_line_2,\n    area\n  } = getState().transaction;\n\n  try {\n    const response = await axios.post('http://localhost:5000/cart/addtocart', {\n      data: {\n        'delivery_address': address_line_1 + '\\n' + address_line_2 + '\\n' + area + '\\n' + city + '-' + pincode + '\\n' + state,\n        'total_price': total_price,\n        'name': name\n      }\n    }, {\n      withCredentials: true\n    });\n    return response.data;\n  } catch (error) {\n    return Promise.reject(500);\n  }\n});\nexport const getSingle = createAsyncThunk('transaction/getSingle', async id => {\n  const response = await axios.delete('http://localhost:5000/cart/delete', {\n    withCredentials: true,\n    data: {\n      'pid': id\n    }\n  });\n  return response.data;\n});\nexport const getAll = createAsyncThunk('transaction/getAll', async () => {\n  const response = await axios.get('http://localhost:5000/cart/getcart', {\n    withCredentials: true\n  });\n  return response.data;\n});\nconst transactionSlice = createSlice({\n  name: 'transaction',\n  initialState: {\n    transaction: [],\n    error: ''\n  },\n  reducers: {},\n  extraReducers: {\n    [trasnactionAdd.fulfilled]: (state, action) => {},\n    [trasnactionAdd.rejected]: (state, action) => {},\n    [getSingle.fulfilled]: (state, action) => {\n      state = action.payload;\n    },\n    [getSingle.rejected]: (state, action) => {\n      state = action.payload;\n    },\n    [getAll.fulfilled]: (state, action) => {\n      state.transaction = action.payload;\n    },\n    [getAll.rejected]: (state, action) => {}\n  }\n});\nexport default transactionSlice.reducer;","map":{"version":3,"sources":["C:/Users/Geeta/opticonnect/frontend/src/slices/transaction/transactionSlice.js"],"names":["createAsyncThunk","createSlice","axios","trasnactionAdd","getState","name","city","state","pincode","address_line_1","address_line_2","area","transaction","response","post","data","total_price","withCredentials","error","Promise","reject","getSingle","id","delete","getAll","get","transactionSlice","initialState","reducers","extraReducers","fulfilled","action","rejected","payload","reducer"],"mappings":"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","sourcesContent":["import {createAsyncThunk, createSlice} from '@reduxjs/toolkit';\r\nimport axios from 'axios';\r\nexport const trasnactionAdd = createAsyncThunk(\r\n    'transaction/Add',\r\n    async ({getState})=>{\r\n        const {name,city,state,pincode,address_line_1,address_line_2,area} = getState().transaction;\r\n        try{\r\n            const response = await axios.post('http://localhost:5000/cart/addtocart',\r\n            {data:{\r\n                'delivery_address':address_line_1+'\\n'+address_line_2+'\\n'+area+'\\n'+city+'-'+pincode+'\\n'+state,\r\n\t\t\t\t'total_price':total_price,\r\n\t\t\t\t'name':name\r\n            }},\r\n            {withCredentials:true});\r\n            return response.data;\r\n        }catch(error){\r\n            return Promise.reject(500);\r\n        }\r\n    }\r\n)\r\nexport const getSingle = createAsyncThunk(\r\n    'transaction/getSingle',\r\n    async (id)=>{\r\n        const response = await axios.delete('http://localhost:5000/cart/delete',{withCredentials:true,data:{'pid':id}});\r\n        return response.data;\r\n    }\r\n)\r\nexport const getAll = createAsyncThunk(\r\n    'transaction/getAll',\r\n    async ()=>{\r\n        const response = await axios.get('http://localhost:5000/cart/getcart',{withCredentials:true});\r\n        return response.data;\r\n    }\r\n)\r\nconst transactionSlice = createSlice({\r\n    name:'transaction',\r\n    initialState:{\r\n        transaction:[],\r\n        error:'',\r\n    },\r\n    reducers:{},\r\n    extraReducers:{\r\n        [trasnactionAdd.fulfilled]:(state, action)=>{\r\n            \r\n        },[trasnactionAdd.rejected]:(state, action)=>{\r\n            \r\n        },[getSingle.fulfilled]:(state,action)=>{\r\n            state=action.payload;\r\n        },[getSingle.rejected]:(state,action)=>{\r\n            state=action.payload;\r\n        },[getAll.fulfilled]:(state, action)=>{\r\n            state.transaction=action.payload;\r\n        },[getAll.rejected]: (state, action)=>{\r\n        }\r\n    }\r\n\r\n})\r\nexport default transactionSlice.reducer;"]},"metadata":{},"sourceType":"module"}