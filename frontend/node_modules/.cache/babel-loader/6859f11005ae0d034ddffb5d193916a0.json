{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Geeta\\\\opticonnect\\\\frontend\\\\src\\\\components\\\\Privateroute.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef } from 'react';\nimport { useSelector } from 'react-redux';\nimport { Redirect, Route } from 'react-router-dom';\nimport Loadingspinner from './Loadingspinner';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PrivateRoute = ({\n  component: Component,\n  ...rest\n}) => {\n  _s();\n\n  const {\n    isAuthenticated,\n    userType\n  } = useSelector(state => state.authentication);\n  const fetched = useRef(false);\n  useEffect(() => {\n    fetched.current = true;\n  }, []);\n\n  if (fetched.current === false) {\n    return /*#__PURE__*/_jsxDEV(Loadingspinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 16\n    }, this);\n  } else if (fetched.current === true && (userType === '' || userType === 'customer')) {\n    return /*#__PURE__*/_jsxDEV(Route, { ...rest,\n      render: props => /*#__PURE__*/_jsxDEV(Component, { ...props\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 48\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 13\n    }, this);\n  } else if (isAuthenticated === true && userType === 'seller') {\n    return /*#__PURE__*/_jsxDEV(Redirect, {\n      to: \"/insertproduct\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 17\n    }, this);\n  }\n};\n\n_s(PrivateRoute, \"cP8C6Jm4IGQxTUOBTfaZxdPU3mM=\", false, function () {\n  return [useSelector];\n});\n\n_c = PrivateRoute;\nexport default PrivateRoute;\n\nvar _c;\n\n$RefreshReg$(_c, \"PrivateRoute\");","map":{"version":3,"sources":["C:/Users/Geeta/opticonnect/frontend/src/components/Privateroute.js"],"names":["React","useEffect","useRef","useSelector","Redirect","Route","Loadingspinner","PrivateRoute","component","Component","rest","isAuthenticated","userType","state","authentication","fetched","current","props"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA4BC,MAA5B,QAAyC,OAAzC;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,QAAT,EAAmBC,KAAnB,QAA+B,kBAA/B;AACA,OAAOC,cAAP,MAA2B,kBAA3B;;;AACA,MAAMC,YAAY,GAAG,CAAC;AAACC,EAAAA,SAAS,EAAEC,SAAZ;AAAuB,KAAGC;AAA1B,CAAD,KAAqC;AAAA;;AACtD,QAAM;AAACC,IAAAA,eAAD;AAAkBC,IAAAA;AAAlB,MAA8BT,WAAW,CAACU,KAAK,IAAIA,KAAK,CAACC,cAAhB,CAA/C;AACA,QAAMC,OAAO,GAAGb,MAAM,CAAC,KAAD,CAAtB;AACAD,EAAAA,SAAS,CAAC,MAAI;AACVc,IAAAA,OAAO,CAACC,OAAR,GAAgB,IAAhB;AACH,GAFQ,EAEP,EAFO,CAAT;;AAGA,MAAGD,OAAO,CAACC,OAAR,KAAoB,KAAvB,EAA6B;AACzB,wBAAO,QAAC,cAAD;AAAA;AAAA;AAAA;AAAA,YAAP;AACH,GAFD,MAEM,IAAGD,OAAO,CAACC,OAAR,KAAkB,IAAlB,KAA2BJ,QAAQ,KAAG,EAAX,IAAiBA,QAAQ,KAAI,UAAxD,CAAH,EAAuE;AACzE,wBACI,QAAC,KAAD,OAAWF,IAAX;AAAiB,MAAA,MAAM,EAAEO,KAAK,iBAAK,QAAC,SAAD,OAAeA;AAAf;AAAA;AAAA;AAAA;AAAA;AAAnC;AAAA;AAAA;AAAA;AAAA,YADJ;AAGH,GAJK,MAIA,IAAGN,eAAe,KAAG,IAAlB,IAA0BC,QAAQ,KAAG,QAAxC,EAAiD;AACnD,wBAAQ,QAAC,QAAD;AAAU,MAAA,EAAE,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA,YAAR;AACH;AACJ,CAfD;;GAAML,Y;UACkCJ,W;;;KADlCI,Y;AAiBN,eAAeA,YAAf","sourcesContent":["import React, { useEffect , useRef} from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { Redirect, Route} from 'react-router-dom';\r\nimport Loadingspinner from './Loadingspinner';\r\nconst PrivateRoute = ({component: Component, ...rest}) => {\r\n    const {isAuthenticated, userType} = useSelector(state => state.authentication);  \r\n    const fetched = useRef(false);\r\n    useEffect(()=>{\r\n        fetched.current=true;\r\n    },[]);\r\n    if(fetched.current === false){\r\n        return(<Loadingspinner/>);\r\n    }else if(fetched.current===true && (userType==='' || userType ==='customer')){\r\n        return (\r\n            <Route {...rest} render={props => (<Component {...props} />)}/>\r\n        );\r\n    }else if(isAuthenticated===true && userType==='seller'){\r\n        return (<Redirect to='/insertproduct'/>); \r\n    }\r\n};\r\n\r\nexport default PrivateRoute;"]},"metadata":{},"sourceType":"module"}