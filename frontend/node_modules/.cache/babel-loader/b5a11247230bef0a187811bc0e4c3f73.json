{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport axios from 'axios';\nexport const checkUsernameAvailability = createAsyncThunk('seller/checkUsernameAvailability', async (_, {\n  getState,\n  rejectWithValue\n}) => {\n  const {\n    username\n  } = getState().seller;\n\n  if (username !== '') {\n    try {\n      const response = axios.get('http://localhost:5000/seller/availability/' + username, {\n        withCredentials: true\n      });\n      return (await response).data;\n    } catch (err) {\n      return rejectWithValue(err.response.data);\n    }\n  }\n});\nexport const createSeller = createAsyncThunk('seller/create', async formData => {\n  try {\n    await axios({\n      method: 'POST',\n      url: 'http://localhost:5000/seller/create',\n      withCredentials: true,\n      data: formData,\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    }).then(response => {\n      return response.data;\n    });\n  } catch (err) {\n    return Promise.reject(401);\n  }\n});\nconst sellerSlice = createSlice({\n  name: 'seller',\n  initialState: {\n    email: '',\n    password: '',\n    confirm_password: '',\n    shopname: '',\n    owner: '',\n    username: '',\n    phone: '',\n    city: '',\n    state: '',\n    pincode: '',\n    address_line_1: '',\n    address_line_2: '',\n    area: '',\n    registrationError: '',\n    passwordMatch: 'NaN',\n    criteriaError: 'NaN',\n    availability: 'NaN'\n  },\n  reducers: {\n    setValue: (state, action) => {\n      state[action.payload.name] = action.payload.value;\n    },\n    setpasswordMatch: (state, action) => {\n      state.passwordMatch = action.payload;\n    },\n    setcriteriaError: (state, action) => {\n      state.criteriaError = action.payload;\n    }\n  },\n  extraReducers: {\n    [createSeller.fulfilled]: (state, action) => {\n      return action.payload.status;\n    },\n    [createSeller.rejected]: (state, action) => {\n      state.error = true;\n    },\n    [checkUsernameAvailability.fulfilled]: (state, action) => {\n      state.availability = action.payload;\n    },\n    [checkUsernameAvailability.rejected]: (state, action) => {\n      state.availability = false;\n    }\n  }\n});\nexport const {\n  setValue,\n  setpasswordMatch,\n  setcriteriaError\n} = sellerSlice.actions;\nexport default sellerSlice.reducer;","map":{"version":3,"sources":["C:/Users/Geeta/opticonnect/frontend/src/slices/seller/sellerSlice.js"],"names":["createAsyncThunk","createSlice","axios","checkUsernameAvailability","_","getState","rejectWithValue","username","seller","response","get","withCredentials","data","err","createSeller","formData","method","url","headers","then","Promise","reject","sellerSlice","name","initialState","email","password","confirm_password","shopname","owner","phone","city","state","pincode","address_line_1","address_line_2","area","registrationError","passwordMatch","criteriaError","availability","reducers","setValue","action","payload","value","setpasswordMatch","setcriteriaError","extraReducers","fulfilled","status","rejected","error","actions","reducer"],"mappings":"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","sourcesContent":["import {createAsyncThunk, createSlice} from '@reduxjs/toolkit';\r\nimport axios from 'axios';\r\nexport const checkUsernameAvailability = createAsyncThunk(\r\n    'seller/checkUsernameAvailability',\r\n    async (_, { getState , rejectWithValue } ) =>{\r\n        const {username} = getState().seller;\r\n        if(username!==''){\r\n            try{\r\n                const response = axios.get('http://localhost:5000/seller/availability/'+username,{withCredentials:true});\r\n                return (await response).data;\r\n            }catch(err){\r\n                return rejectWithValue(err.response.data);\r\n            }\r\n        }\r\n    }\r\n)\r\nexport const createSeller = createAsyncThunk(\r\n    'seller/create',\r\n    async ( formData ) =>{        \r\n        try{\r\n            await axios({\r\n                method:'POST',\r\n                url:'http://localhost:5000/seller/create',\r\n                withCredentials:true,\r\n                data:formData,\r\n                headers:{'Content-Type': 'multipart/form-data'},\r\n            }).then((response)=>{\r\n                return response.data;\r\n            })\r\n        }catch(err){\r\n            return Promise.reject(401);\r\n        }\r\n    }\r\n)\r\nconst sellerSlice = createSlice({\r\n    name:'seller',\r\n    initialState:{\r\n        email: '',\r\n        password:'',\r\n        confirm_password:'',\r\n        shopname:'',\r\n        owner:'',\r\n        username:'',\r\n        phone:'',\r\n        city:'',\r\n\t\tstate:'',\r\n\t\tpincode:'',\r\n\t\taddress_line_1:'',\r\n\t\taddress_line_2:'',\r\n\t\tarea:'',\r\n        registrationError:'',\r\n        passwordMatch:'NaN',\r\n        criteriaError:'NaN',\r\n        availability:'NaN'\r\n        \r\n    },\r\n    reducers:{\r\n        setValue:(state,action)=>{\r\n            state[action.payload.name] = action.payload.value;\r\n        },setpasswordMatch:(state, action)=>{\r\n            state.passwordMatch = action.payload;\r\n        },setcriteriaError:(state, action)=>{\r\n            state.criteriaError = action.payload;\r\n        }\r\n    },\r\n    extraReducers:{\r\n        [createSeller.fulfilled]:(state, action)=>{\r\n            return action.payload.status;\r\n        },[createSeller.rejected]:(state, action)=>{\r\n            state.error = true;\r\n        },[checkUsernameAvailability.fulfilled]:(state, action)=>{\r\n            state.availability = action.payload;\r\n        },[checkUsernameAvailability.rejected]:(state,action)=>{\r\n            state.availability = false;\r\n        }\r\n    }\r\n})\r\nexport const {setValue, setpasswordMatch, setcriteriaError}=sellerSlice.actions;\r\nexport default sellerSlice.reducer;"]},"metadata":{},"sourceType":"module"}