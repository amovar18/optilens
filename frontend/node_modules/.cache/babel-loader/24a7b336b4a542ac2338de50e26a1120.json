{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport axios from 'axios';\nexport const checkUsernameAvailability = createAsyncThunk('seller/checkUsernameAvailability', async ({\n  getState\n}) => {\n  const {\n    username\n  } = getState().seller;\n\n  if (username !== '') {\n    try {\n      const response = axios.get('http://localhost:5000/seller/availability/' + username, {\n        withCredentials: true\n      });\n      return (await response).data;\n    } catch (err) {\n      return Promise.reject(401);\n    }\n  }\n});\nexport const createSeller = createAsyncThunk('seller/create', async (company_registration, {\n  getState\n}) => {\n  console.log(company_registration, getState().seller);\n  const {\n    username,\n    password,\n    name,\n    email,\n    phone,\n    owner,\n    address_line_1,\n    address_line_2,\n    area,\n    pincode,\n    city,\n    state\n  } = getState().seller;\n  console.log(username, password, name, email, phone, owner, address_line_1, address_line_2, area, pincode, city, state);\n  const address = address_line_1 + '\\n' + address_line_2 + '\\n' + area + '-' + pincode + '\\n' + city + '\\n' + state;\n  const formData = new FormData();\n  formData.append('email', email);\n  formData.append('password', password);\n  formData.append('name', name);\n  formData.append('owner', owner);\n  formData.append('username', username);\n  formData.append('phone', phone);\n  formData.append('image', company_registration);\n  console.log(formData.append('address', address));\n  console.log(formData);\n\n  try {\n    const response = axios.post('http://localhost:5000/seller/create', {\n      Headers: {\n        'Content-Type': 'multipart/form-data'\n      },\n      withCredentials: true\n    }, {\n      data: formData\n    });\n    return (await response).data;\n  } catch (err) {\n    return Promise.reject(401);\n  }\n});\nconst sellerSlice = createSlice({\n  name: 'seller',\n  initialState: {\n    email: '',\n    password: '',\n    confirm_password: '',\n    name: '',\n    owner: '',\n    username: '',\n    phone: '',\n    city: '',\n    state: '',\n    pincode: '',\n    address_line_1: '',\n    address_line_2: '',\n    area: '',\n    registrationError: '',\n    passwordMatch: 'NaN',\n    criteriaError: 'NaN',\n    availability: 'NaN'\n  },\n  reducers: {\n    setValue: (state, action) => {\n      state[action.payload.name] = action.payload.value;\n    },\n    setpasswordMatch: (state, action) => {\n      state.passwordMatch = action.payload;\n    },\n    setcriteriaError: (state, action) => {\n      state.criteriaError = action.payload;\n    }\n  },\n  extraReducers: {\n    [createSeller.fulfilled]: (state, action) => {\n      console.log(action);\n      state.user = action.payload.user;\n      state.links = action.payload.links;\n      console.log(state);\n      state.isAuthenticated = true;\n      return action.payload.status;\n    },\n    [createSeller.rejected]: (state, action) => {\n      state.error = true;\n    },\n    [checkUsernameAvailability.fulfilled]: (state, action) => {\n      state.availability = action.payload;\n    },\n    [checkUsernameAvailability.rejected]: (state, action) => {\n      state.availability = false;\n    }\n  }\n});\nexport const {\n  setValue,\n  setpasswordMatch,\n  setcriteriaError\n} = sellerSlice.actions;\nexport default sellerSlice.reducer;","map":{"version":3,"sources":["C:/Users/Geeta/opticonnect/frontend/src/slices/seller/sellerSlice.js"],"names":["createAsyncThunk","createSlice","axios","checkUsernameAvailability","getState","username","seller","response","get","withCredentials","data","err","Promise","reject","createSeller","company_registration","console","log","password","name","email","phone","owner","address_line_1","address_line_2","area","pincode","city","state","address","formData","FormData","append","post","Headers","sellerSlice","initialState","confirm_password","registrationError","passwordMatch","criteriaError","availability","reducers","setValue","action","payload","value","setpasswordMatch","setcriteriaError","extraReducers","fulfilled","user","links","isAuthenticated","status","rejected","error","actions","reducer"],"mappings":"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","sourcesContent":["import {createAsyncThunk, createSlice} from '@reduxjs/toolkit';\r\nimport axios from 'axios';\r\nexport const checkUsernameAvailability = createAsyncThunk(\r\n    'seller/checkUsernameAvailability',\r\n    async ( {getState} ) =>{\r\n        const {username} = getState().seller;\r\n        if(username!==''){\r\n            try{\r\n                const response = axios.get('http://localhost:5000/seller/availability/'+username,{withCredentials:true});\r\n                return (await response).data;\r\n            }catch(err){\r\n                return Promise.reject(401);\r\n            }\r\n        }\r\n    }\r\n)\r\nexport const createSeller = createAsyncThunk(\r\n    'seller/create',\r\n    async ( company_registration, {getState} ) =>{\r\n        console.log(company_registration, getState().seller)\r\n        const {username, password, name, email, phone, owner, address_line_1,address_line_2, area, pincode, city, state}=getState().seller;\r\n        console.log(username, password, name, email, phone, owner, address_line_1,address_line_2, area, pincode, city, state)\r\n        const address=address_line_1+'\\n'+address_line_2+'\\n'+area+'-'+pincode+'\\n'+city+'\\n'+state;\r\n        const formData = new FormData(); \r\n        formData.append('email',email);\r\n        formData.append('password',password);\r\n        formData.append('name',name);\r\n        formData.append('owner',owner);\r\n        formData.append('username',username);\r\n        formData.append('phone',phone);\r\n        formData.append('image', company_registration);\r\n        console.log(formData.append('address',address));\r\n        console.log(formData);\r\n        try{\r\n            const response = axios.post('http://localhost:5000/seller/create'\r\n            ,{Headers:{'Content-Type':'multipart/form-data'},withCredentials:true},{data:formData});\r\n            return (await response).data;\r\n        }catch(err){\r\n            return Promise.reject(401);\r\n        }\r\n    }\r\n)\r\nconst sellerSlice = createSlice({\r\n    name:'seller',\r\n    initialState:{\r\n        email: '',\r\n        password:'',\r\n        confirm_password:'',\r\n        name:'',\r\n        owner:'',\r\n        username:'',\r\n        phone:'',\r\n        city:'',\r\n\t\tstate:'',\r\n\t\tpincode:'',\r\n\t\taddress_line_1:'',\r\n\t\taddress_line_2:'',\r\n\t\tarea:'',\r\n        registrationError:'',\r\n        passwordMatch:'NaN',\r\n        criteriaError:'NaN',\r\n        availability:'NaN'\r\n        \r\n    },\r\n    reducers:{\r\n        setValue:(state,action)=>{\r\n            state[action.payload.name] = action.payload.value;\r\n        },setpasswordMatch:(state, action)=>{\r\n            state.passwordMatch = action.payload;\r\n        },setcriteriaError:(state, action)=>{\r\n            state.criteriaError = action.payload;\r\n        }\r\n    },\r\n    extraReducers:{\r\n        [createSeller.fulfilled]:(state, action)=>{\r\n            console.log(action)\r\n            state.user=action.payload.user;\r\n            state.links=action.payload.links;\r\n            console.log(state);\r\n            state.isAuthenticated=true;\r\n            return action.payload.status;\r\n        },[createSeller.rejected]:(state, action)=>{\r\n            state.error = true;\r\n        },[checkUsernameAvailability.fulfilled]:(state, action)=>{\r\n            state.availability = action.payload;\r\n        },[checkUsernameAvailability.rejected]:(state,action)=>{\r\n            state.availability = false;\r\n        }\r\n    }\r\n})\r\nexport const {setValue, setpasswordMatch, setcriteriaError}=sellerSlice.actions;\r\nexport default sellerSlice.reducer;"]},"metadata":{},"sourceType":"module"}